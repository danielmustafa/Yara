//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API {

    /**
    Generate Meal Plan

    Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
    */
    public enum GenerateMealPlan {

        public static let service = APIService<Response>(id: "generateMealPlan", tag: "", method: "GET", path: "/mealplanner/generate", hasBody: false, securityRequirements: [SecurityRequirement(type: "apiKeyScheme", scopes: [])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Either for one "day" or an entire "week". */
                public var timeFrame: String?

                /** What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. */
                public var targetCalories: Double?

                /** Enter a diet that the meal plan has to adhere to. See a full list of supported diets. */
                public var diet: String?

                /** A comma-separated list of allergens or ingredients that must be excluded. */
                public var exclude: String?

                public init(timeFrame: String? = nil, targetCalories: Double? = nil, diet: String? = nil, exclude: String? = nil) {
                    self.timeFrame = timeFrame
                    self.targetCalories = targetCalories
                    self.diet = diet
                    self.exclude = exclude
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GenerateMealPlan.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(timeFrame: String? = nil, targetCalories: Double? = nil, diet: String? = nil, exclude: String? = nil) {
                let options = Options(timeFrame: timeFrame, targetCalories: targetCalories, diet: diet, exclude: exclude)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let timeFrame = options.timeFrame {
                  params["timeFrame"] = timeFrame
                }
                if let targetCalories = options.targetCalories {
                  params["targetCalories"] = targetCalories
                }
                if let diet = options.diet {
                  params["diet"] = diet
                }
                if let exclude = options.exclude {
                  params["exclude"] = exclude
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [String: Any]

            /** Success */
            case status200([String: Any])

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            /** Not Found */
            case status404

            public var success: [String: Any]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decodeAny([String: Any].self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                case 404: self = .status404
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
