//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API {

    /**
    Create Recipe Card

    Generate a recipe card for a recipe.
    */
    public enum CreateRecipeCard {

        public static let service = APIService<Response>(id: "createRecipeCard", tag: "", method: "POST", path: "/recipes/visualizeRecipe", hasBody: true, isUpload: true, securityRequirements: [SecurityRequirement(type: "apiKeyScheme", scopes: [])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The title of the recipe. */
                public var title: String

                /** The binary image of the recipe as jpg. */
                public var image: File

                /** The ingredient list of the recipe, one ingredient per line (separate lines with \n). */
                public var ingredients: String

                /** The instructions to make the recipe. One step per line (separate lines with \n). */
                public var instructions: String

                /** The number of minutes it takes to get the recipe on the table. */
                public var readyInMinutes: Double

                /** The number of servings the recipe makes. */
                public var servings: Double

                /** The mask to put over the recipe image ("ellipseMask", "diamondMask", "starMask", "heartMask", "potMask", "fishMask"). */
                public var mask: String

                /** The background image ("none","background1", or "background2"). */
                public var backgroundImage: String

                /** The author of the recipe. */
                public var author: String?

                /** The background color for the recipe card as a hex-string. */
                public var backgroundColor: String?

                /** The font color for the recipe card as a hex-string. */
                public var fontColor: String?

                /** The source of the recipe. */
                public var source: String?

                public init(title: String, image: File, ingredients: String, instructions: String, readyInMinutes: Double, servings: Double, mask: String, backgroundImage: String, author: String? = nil, backgroundColor: String? = nil, fontColor: String? = nil, source: String? = nil) {
                    self.title = title
                    self.image = image
                    self.ingredients = ingredients
                    self.instructions = instructions
                    self.readyInMinutes = readyInMinutes
                    self.servings = servings
                    self.mask = mask
                    self.backgroundImage = backgroundImage
                    self.author = author
                    self.backgroundColor = backgroundColor
                    self.fontColor = fontColor
                    self.source = source
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: CreateRecipeCard.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(title: String, image: File, ingredients: String, instructions: String, readyInMinutes: Double, servings: Double, mask: String, backgroundImage: String, author: String? = nil, backgroundColor: String? = nil, fontColor: String? = nil, source: String? = nil) {
                let options = Options(title: title, image: image, ingredients: ingredients, instructions: instructions, readyInMinutes: readyInMinutes, servings: servings, mask: mask, backgroundImage: backgroundImage, author: author, backgroundColor: backgroundColor, fontColor: fontColor, source: source)
                self.init(options: options)
            }

            public override var formParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["title"] = options.title
                params["image"] = options.image.encode()
                params["ingredients"] = options.ingredients
                params["instructions"] = options.instructions
                params["readyInMinutes"] = options.readyInMinutes
                params["servings"] = options.servings
                params["mask"] = options.mask
                params["backgroundImage"] = options.backgroundImage
                if let author = options.author {
                  params["author"] = author
                }
                if let backgroundColor = options.backgroundColor {
                  params["backgroundColor"] = backgroundColor
                }
                if let fontColor = options.fontColor {
                  params["fontColor"] = fontColor
                }
                if let source = options.source {
                  params["source"] = source
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [String: Any]

            /** Success */
            case status200([String: Any])

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            /** Not Found */
            case status404

            public var success: [String: Any]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decodeAny([String: Any].self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                case 404: self = .status404
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
