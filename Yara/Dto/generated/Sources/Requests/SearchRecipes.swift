//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API {

    /**
    Search Recipes

    Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
    */
    public enum SearchRecipes {

        public static let service = APIService<Response>(id: "searchRecipes", tag: "", method: "GET", path: "/recipes/complexSearch", hasBody: false, securityRequirements: [SecurityRequirement(type: "apiKeyScheme", scopes: [])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The (natural language) recipe search query. */
                public var query: String

                /** The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines. */
                public var cuisine: String?

                /** The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines. */
                public var excludeCuisine: String?

                /** The diet for which the recipes must be suitable. See a full list of supported diets. */
                public var diet: String?

                /** A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. */
                public var intolerances: String?

                /** The equipment required. Multiple values will be interpreted as 'or'. For example, value could be "blender, frying pan, bowl". */
                public var equipment: String?

                /** A comma-separated list of ingredients that should/must be used in the recipes. */
                public var includeIngredients: String?

                /** A comma-separated list of ingredients or ingredient types that the recipes must not contain. */
                public var excludeIngredients: String?

                /** The type of recipe. See a full list of supported meal types. */
                public var type: String?

                /** Whether the recipes must have instructions. */
                public var instructionsRequired: Bool?

                /** Add information about the ingredients and whether they are used or missing in relation to the query. */
                public var fillIngredients: Bool?

                /** If set to true, you get more information about the recipes returned. */
                public var addRecipeInformation: Bool?

                /** If set to true, you get nutritional information about each recipes returned. */
                public var addRecipeNutrition: Bool?

                /** The username of the recipe author. */
                public var author: String?

                /** User defined tags that have to match. The author param has to be set. */
                public var tags: String?

                /** The id of the recipe box to which the search should be limited to. */
                public var recipeBoxId: Double?

                /** Enter text that must be found in the title of the recipes. */
                public var titleMatch: String?

                /** The maximum time in minutes it should take to prepare and cook the recipe. */
                public var maxReadyTime: Double?

                /** Whether to ignore typical pantry items, such as water, salt, flour, etc. */
                public var ignorePantry: Bool?

                /** The strategy to sort recipes by. See a full list of supported sorting options. */
                public var sort: String?

                /** The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending). */
                public var sortDirection: String?

                /** The minimum amount of carbohydrates in grams the recipe must have. */
                public var minCarbs: Double?

                /** The maximum amount of carbohydrates in grams the recipe can have. */
                public var maxCarbs: Double?

                /** The minimum amount of protein in grams the recipe must have. */
                public var minProtein: Double?

                /** The maximum amount of protein in grams the recipe can have. */
                public var maxProtein: Double?

                /** The minimum amount of calories the recipe must have. */
                public var minCalories: Double?

                /** The maximum amount of calories the recipe can have. */
                public var maxCalories: Double?

                /** The minimum amount of fat in grams the recipe must have. */
                public var minFat: Double?

                /** The maximum amount of fat in grams the recipe can have. */
                public var maxFat: Double?

                /** The minimum amount of alcohol in grams the recipe must have. */
                public var minAlcohol: Double?

                /** The maximum amount of alcohol in grams the recipe can have. */
                public var maxAlcohol: Double?

                /** The minimum amount of caffeine in milligrams the recipe must have. */
                public var minCaffeine: Double?

                /** The maximum amount of caffeine in milligrams the recipe can have. */
                public var maxCaffeine: Double?

                /** The minimum amount of copper in milligrams the recipe must have. */
                public var minCopper: Double?

                /** The maximum amount of copper in milligrams the recipe can have. */
                public var maxCopper: Double?

                /** The minimum amount of calcium in milligrams the recipe must have. */
                public var minCalcium: Double?

                /** The maximum amount of calcium in milligrams the recipe can have. */
                public var maxCalcium: Double?

                /** The minimum amount of choline in milligrams the recipe must have. */
                public var minCholine: Double?

                /** The maximum amount of choline in milligrams the recipe can have. */
                public var maxCholine: Double?

                /** The minimum amount of cholesterol in milligrams the recipe must have. */
                public var minCholesterol: Double?

                /** The maximum amount of cholesterol in milligrams the recipe can have. */
                public var maxCholesterol: Double?

                /** The minimum amount of fluoride in milligrams the recipe must have. */
                public var minFluoride: Double?

                /** The maximum amount of fluoride in milligrams the recipe can have. */
                public var maxFluoride: Double?

                /** The minimum amount of saturated fat in grams the recipe must have. */
                public var minSaturatedFat: Double?

                /** The maximum amount of saturated fat in grams the recipe can have. */
                public var maxSaturatedFat: Double?

                /** The minimum amount of Vitamin A in IU the recipe must have. */
                public var minVitaminA: Double?

                /** The maximum amount of Vitamin A in IU the recipe can have. */
                public var maxVitaminA: Double?

                /** The minimum amount of Vitamin C milligrams the recipe must have. */
                public var minVitaminC: Double?

                /** The maximum amount of Vitamin C in milligrams the recipe can have. */
                public var maxVitaminC: Double?

                /** The minimum amount of Vitamin D in micrograms the recipe must have. */
                public var minVitaminD: Double?

                /** The maximum amount of Vitamin D in micrograms the recipe can have. */
                public var maxVitaminD: Double?

                /** The minimum amount of Vitamin E in milligrams the recipe must have. */
                public var minVitaminE: Double?

                /** The maximum amount of Vitamin E in milligrams the recipe can have. */
                public var maxVitaminE: Double?

                /** The minimum amount of Vitamin K in micrograms the recipe must have. */
                public var minVitaminK: Double?

                /** The maximum amount of Vitamin K in micrograms the recipe can have. */
                public var maxVitaminK: Double?

                /** The minimum amount of Vitamin B1 in milligrams the recipe must have. */
                public var minVitaminB1: Double?

                /** The maximum amount of Vitamin B1 in milligrams the recipe can have. */
                public var maxVitaminB1: Double?

                /** The minimum amount of Vitamin B2 in milligrams the recipe must have. */
                public var minVitaminB2: Double?

                /** The maximum amount of Vitamin B2 in milligrams the recipe can have. */
                public var maxVitaminB2: Double?

                /** The minimum amount of Vitamin B5 in milligrams the recipe must have. */
                public var minVitaminB5: Double?

                /** The maximum amount of Vitamin B5 in milligrams the recipe can have. */
                public var maxVitaminB5: Double?

                /** The minimum amount of Vitamin B3 in milligrams the recipe must have. */
                public var minVitaminB3: Double?

                /** The maximum amount of Vitamin B3 in milligrams the recipe can have. */
                public var maxVitaminB3: Double?

                /** The minimum amount of Vitamin B6 in milligrams the recipe must have. */
                public var minVitaminB6: Double?

                /** The maximum amount of Vitamin B6 in milligrams the recipe can have. */
                public var maxVitaminB6: Double?

                /** The minimum amount of Vitamin B12 in micrograms the recipe must have. */
                public var minVitaminB12: Double?

                /** The maximum amount of Vitamin B12 in micrograms the recipe can have. */
                public var maxVitaminB12: Double?

                /** The minimum amount of fiber in grams the recipe must have. */
                public var minFiber: Double?

                /** The maximum amount of fiber in grams the recipe can have. */
                public var maxFiber: Double?

                /** The minimum amount of folate in micrograms the recipe must have. */
                public var minFolate: Double?

                /** The maximum amount of folate in micrograms the recipe can have. */
                public var maxFolate: Double?

                /** The minimum amount of folic acid in micrograms the recipe must have. */
                public var minFolicAcid: Double?

                /** The maximum amount of folic acid in micrograms the recipe can have. */
                public var maxFolicAcid: Double?

                /** The minimum amount of iodine in micrograms the recipe must have. */
                public var minIodine: Double?

                /** The maximum amount of iodine in micrograms the recipe can have. */
                public var maxIodine: Double?

                /** The minimum amount of iron in milligrams the recipe must have. */
                public var minIron: Double?

                /** The maximum amount of iron in milligrams the recipe can have. */
                public var maxIron: Double?

                /** The minimum amount of magnesium in milligrams the recipe must have. */
                public var minMagnesium: Double?

                /** The maximum amount of magnesium in milligrams the recipe can have. */
                public var maxMagnesium: Double?

                /** The minimum amount of manganese in milligrams the recipe must have. */
                public var minManganese: Double?

                /** The maximum amount of manganese in milligrams the recipe can have. */
                public var maxManganese: Double?

                /** The minimum amount of phosphorus in milligrams the recipe must have. */
                public var minPhosphorus: Double?

                /** The maximum amount of phosphorus in milligrams the recipe can have. */
                public var maxPhosphorus: Double?

                /** The minimum amount of potassium in milligrams the recipe must have. */
                public var minPotassium: Double?

                /** The maximum amount of potassium in milligrams the recipe can have. */
                public var maxPotassium: Double?

                /** The minimum amount of selenium in micrograms the recipe must have. */
                public var minSelenium: Double?

                /** The maximum amount of selenium in micrograms the recipe can have. */
                public var maxSelenium: Double?

                /** The minimum amount of sodium in milligrams the recipe must have. */
                public var minSodium: Double?

                /** The maximum amount of sodium in milligrams the recipe can have. */
                public var maxSodium: Double?

                /** The minimum amount of sugar in grams the recipe must have. */
                public var minSugar: Double?

                /** The maximum amount of sugar in grams the recipe can have. */
                public var maxSugar: Double?

                /** The minimum amount of zinc in milligrams the recipe must have. */
                public var minZinc: Double?

                /** The maximum amount of zinc in milligrams the recipe can have. */
                public var maxZinc: Double?

                /** The number of results to skip (between 0 and 900). */
                public var offset: Double?

                /** The number of expected results (between 1 and 100). */
                public var number: Double?

                /** Whether the recipes should have an open license that allows display with proper attribution. */
                public var limitLicense: Bool?

                public init(query: String, cuisine: String? = nil, excludeCuisine: String? = nil, diet: String? = nil, intolerances: String? = nil, equipment: String? = nil, includeIngredients: String? = nil, excludeIngredients: String? = nil, type: String? = nil, instructionsRequired: Bool? = nil, fillIngredients: Bool? = nil, addRecipeInformation: Bool? = nil, addRecipeNutrition: Bool? = nil, author: String? = nil, tags: String? = nil, recipeBoxId: Double? = nil, titleMatch: String? = nil, maxReadyTime: Double? = nil, ignorePantry: Bool? = nil, sort: String? = nil, sortDirection: String? = nil, minCarbs: Double? = nil, maxCarbs: Double? = nil, minProtein: Double? = nil, maxProtein: Double? = nil, minCalories: Double? = nil, maxCalories: Double? = nil, minFat: Double? = nil, maxFat: Double? = nil, minAlcohol: Double? = nil, maxAlcohol: Double? = nil, minCaffeine: Double? = nil, maxCaffeine: Double? = nil, minCopper: Double? = nil, maxCopper: Double? = nil, minCalcium: Double? = nil, maxCalcium: Double? = nil, minCholine: Double? = nil, maxCholine: Double? = nil, minCholesterol: Double? = nil, maxCholesterol: Double? = nil, minFluoride: Double? = nil, maxFluoride: Double? = nil, minSaturatedFat: Double? = nil, maxSaturatedFat: Double? = nil, minVitaminA: Double? = nil, maxVitaminA: Double? = nil, minVitaminC: Double? = nil, maxVitaminC: Double? = nil, minVitaminD: Double? = nil, maxVitaminD: Double? = nil, minVitaminE: Double? = nil, maxVitaminE: Double? = nil, minVitaminK: Double? = nil, maxVitaminK: Double? = nil, minVitaminB1: Double? = nil, maxVitaminB1: Double? = nil, minVitaminB2: Double? = nil, maxVitaminB2: Double? = nil, minVitaminB5: Double? = nil, maxVitaminB5: Double? = nil, minVitaminB3: Double? = nil, maxVitaminB3: Double? = nil, minVitaminB6: Double? = nil, maxVitaminB6: Double? = nil, minVitaminB12: Double? = nil, maxVitaminB12: Double? = nil, minFiber: Double? = nil, maxFiber: Double? = nil, minFolate: Double? = nil, maxFolate: Double? = nil, minFolicAcid: Double? = nil, maxFolicAcid: Double? = nil, minIodine: Double? = nil, maxIodine: Double? = nil, minIron: Double? = nil, maxIron: Double? = nil, minMagnesium: Double? = nil, maxMagnesium: Double? = nil, minManganese: Double? = nil, maxManganese: Double? = nil, minPhosphorus: Double? = nil, maxPhosphorus: Double? = nil, minPotassium: Double? = nil, maxPotassium: Double? = nil, minSelenium: Double? = nil, maxSelenium: Double? = nil, minSodium: Double? = nil, maxSodium: Double? = nil, minSugar: Double? = nil, maxSugar: Double? = nil, minZinc: Double? = nil, maxZinc: Double? = nil, offset: Double? = nil, number: Double? = nil, limitLicense: Bool? = nil) {
                    self.query = query
                    self.cuisine = cuisine
                    self.excludeCuisine = excludeCuisine
                    self.diet = diet
                    self.intolerances = intolerances
                    self.equipment = equipment
                    self.includeIngredients = includeIngredients
                    self.excludeIngredients = excludeIngredients
                    self.type = type
                    self.instructionsRequired = instructionsRequired
                    self.fillIngredients = fillIngredients
                    self.addRecipeInformation = addRecipeInformation
                    self.addRecipeNutrition = addRecipeNutrition
                    self.author = author
                    self.tags = tags
                    self.recipeBoxId = recipeBoxId
                    self.titleMatch = titleMatch
                    self.maxReadyTime = maxReadyTime
                    self.ignorePantry = ignorePantry
                    self.sort = sort
                    self.sortDirection = sortDirection
                    self.minCarbs = minCarbs
                    self.maxCarbs = maxCarbs
                    self.minProtein = minProtein
                    self.maxProtein = maxProtein
                    self.minCalories = minCalories
                    self.maxCalories = maxCalories
                    self.minFat = minFat
                    self.maxFat = maxFat
                    self.minAlcohol = minAlcohol
                    self.maxAlcohol = maxAlcohol
                    self.minCaffeine = minCaffeine
                    self.maxCaffeine = maxCaffeine
                    self.minCopper = minCopper
                    self.maxCopper = maxCopper
                    self.minCalcium = minCalcium
                    self.maxCalcium = maxCalcium
                    self.minCholine = minCholine
                    self.maxCholine = maxCholine
                    self.minCholesterol = minCholesterol
                    self.maxCholesterol = maxCholesterol
                    self.minFluoride = minFluoride
                    self.maxFluoride = maxFluoride
                    self.minSaturatedFat = minSaturatedFat
                    self.maxSaturatedFat = maxSaturatedFat
                    self.minVitaminA = minVitaminA
                    self.maxVitaminA = maxVitaminA
                    self.minVitaminC = minVitaminC
                    self.maxVitaminC = maxVitaminC
                    self.minVitaminD = minVitaminD
                    self.maxVitaminD = maxVitaminD
                    self.minVitaminE = minVitaminE
                    self.maxVitaminE = maxVitaminE
                    self.minVitaminK = minVitaminK
                    self.maxVitaminK = maxVitaminK
                    self.minVitaminB1 = minVitaminB1
                    self.maxVitaminB1 = maxVitaminB1
                    self.minVitaminB2 = minVitaminB2
                    self.maxVitaminB2 = maxVitaminB2
                    self.minVitaminB5 = minVitaminB5
                    self.maxVitaminB5 = maxVitaminB5
                    self.minVitaminB3 = minVitaminB3
                    self.maxVitaminB3 = maxVitaminB3
                    self.minVitaminB6 = minVitaminB6
                    self.maxVitaminB6 = maxVitaminB6
                    self.minVitaminB12 = minVitaminB12
                    self.maxVitaminB12 = maxVitaminB12
                    self.minFiber = minFiber
                    self.maxFiber = maxFiber
                    self.minFolate = minFolate
                    self.maxFolate = maxFolate
                    self.minFolicAcid = minFolicAcid
                    self.maxFolicAcid = maxFolicAcid
                    self.minIodine = minIodine
                    self.maxIodine = maxIodine
                    self.minIron = minIron
                    self.maxIron = maxIron
                    self.minMagnesium = minMagnesium
                    self.maxMagnesium = maxMagnesium
                    self.minManganese = minManganese
                    self.maxManganese = maxManganese
                    self.minPhosphorus = minPhosphorus
                    self.maxPhosphorus = maxPhosphorus
                    self.minPotassium = minPotassium
                    self.maxPotassium = maxPotassium
                    self.minSelenium = minSelenium
                    self.maxSelenium = maxSelenium
                    self.minSodium = minSodium
                    self.maxSodium = maxSodium
                    self.minSugar = minSugar
                    self.maxSugar = maxSugar
                    self.minZinc = minZinc
                    self.maxZinc = maxZinc
                    self.offset = offset
                    self.number = number
                    self.limitLicense = limitLicense
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: SearchRecipes.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(query: String, cuisine: String? = nil, excludeCuisine: String? = nil, diet: String? = nil, intolerances: String? = nil, equipment: String? = nil, includeIngredients: String? = nil, excludeIngredients: String? = nil, type: String? = nil, instructionsRequired: Bool? = nil, fillIngredients: Bool? = nil, addRecipeInformation: Bool? = nil, addRecipeNutrition: Bool? = nil, author: String? = nil, tags: String? = nil, recipeBoxId: Double? = nil, titleMatch: String? = nil, maxReadyTime: Double? = nil, ignorePantry: Bool? = nil, sort: String? = nil, sortDirection: String? = nil, minCarbs: Double? = nil, maxCarbs: Double? = nil, minProtein: Double? = nil, maxProtein: Double? = nil, minCalories: Double? = nil, maxCalories: Double? = nil, minFat: Double? = nil, maxFat: Double? = nil, minAlcohol: Double? = nil, maxAlcohol: Double? = nil, minCaffeine: Double? = nil, maxCaffeine: Double? = nil, minCopper: Double? = nil, maxCopper: Double? = nil, minCalcium: Double? = nil, maxCalcium: Double? = nil, minCholine: Double? = nil, maxCholine: Double? = nil, minCholesterol: Double? = nil, maxCholesterol: Double? = nil, minFluoride: Double? = nil, maxFluoride: Double? = nil, minSaturatedFat: Double? = nil, maxSaturatedFat: Double? = nil, minVitaminA: Double? = nil, maxVitaminA: Double? = nil, minVitaminC: Double? = nil, maxVitaminC: Double? = nil, minVitaminD: Double? = nil, maxVitaminD: Double? = nil, minVitaminE: Double? = nil, maxVitaminE: Double? = nil, minVitaminK: Double? = nil, maxVitaminK: Double? = nil, minVitaminB1: Double? = nil, maxVitaminB1: Double? = nil, minVitaminB2: Double? = nil, maxVitaminB2: Double? = nil, minVitaminB5: Double? = nil, maxVitaminB5: Double? = nil, minVitaminB3: Double? = nil, maxVitaminB3: Double? = nil, minVitaminB6: Double? = nil, maxVitaminB6: Double? = nil, minVitaminB12: Double? = nil, maxVitaminB12: Double? = nil, minFiber: Double? = nil, maxFiber: Double? = nil, minFolate: Double? = nil, maxFolate: Double? = nil, minFolicAcid: Double? = nil, maxFolicAcid: Double? = nil, minIodine: Double? = nil, maxIodine: Double? = nil, minIron: Double? = nil, maxIron: Double? = nil, minMagnesium: Double? = nil, maxMagnesium: Double? = nil, minManganese: Double? = nil, maxManganese: Double? = nil, minPhosphorus: Double? = nil, maxPhosphorus: Double? = nil, minPotassium: Double? = nil, maxPotassium: Double? = nil, minSelenium: Double? = nil, maxSelenium: Double? = nil, minSodium: Double? = nil, maxSodium: Double? = nil, minSugar: Double? = nil, maxSugar: Double? = nil, minZinc: Double? = nil, maxZinc: Double? = nil, offset: Double? = nil, number: Double? = nil, limitLicense: Bool? = nil) {
                let options = Options(query: query, cuisine: cuisine, excludeCuisine: excludeCuisine, diet: diet, intolerances: intolerances, equipment: equipment, includeIngredients: includeIngredients, excludeIngredients: excludeIngredients, type: type, instructionsRequired: instructionsRequired, fillIngredients: fillIngredients, addRecipeInformation: addRecipeInformation, addRecipeNutrition: addRecipeNutrition, author: author, tags: tags, recipeBoxId: recipeBoxId, titleMatch: titleMatch, maxReadyTime: maxReadyTime, ignorePantry: ignorePantry, sort: sort, sortDirection: sortDirection, minCarbs: minCarbs, maxCarbs: maxCarbs, minProtein: minProtein, maxProtein: maxProtein, minCalories: minCalories, maxCalories: maxCalories, minFat: minFat, maxFat: maxFat, minAlcohol: minAlcohol, maxAlcohol: maxAlcohol, minCaffeine: minCaffeine, maxCaffeine: maxCaffeine, minCopper: minCopper, maxCopper: maxCopper, minCalcium: minCalcium, maxCalcium: maxCalcium, minCholine: minCholine, maxCholine: maxCholine, minCholesterol: minCholesterol, maxCholesterol: maxCholesterol, minFluoride: minFluoride, maxFluoride: maxFluoride, minSaturatedFat: minSaturatedFat, maxSaturatedFat: maxSaturatedFat, minVitaminA: minVitaminA, maxVitaminA: maxVitaminA, minVitaminC: minVitaminC, maxVitaminC: maxVitaminC, minVitaminD: minVitaminD, maxVitaminD: maxVitaminD, minVitaminE: minVitaminE, maxVitaminE: maxVitaminE, minVitaminK: minVitaminK, maxVitaminK: maxVitaminK, minVitaminB1: minVitaminB1, maxVitaminB1: maxVitaminB1, minVitaminB2: minVitaminB2, maxVitaminB2: maxVitaminB2, minVitaminB5: minVitaminB5, maxVitaminB5: maxVitaminB5, minVitaminB3: minVitaminB3, maxVitaminB3: maxVitaminB3, minVitaminB6: minVitaminB6, maxVitaminB6: maxVitaminB6, minVitaminB12: minVitaminB12, maxVitaminB12: maxVitaminB12, minFiber: minFiber, maxFiber: maxFiber, minFolate: minFolate, maxFolate: maxFolate, minFolicAcid: minFolicAcid, maxFolicAcid: maxFolicAcid, minIodine: minIodine, maxIodine: maxIodine, minIron: minIron, maxIron: maxIron, minMagnesium: minMagnesium, maxMagnesium: maxMagnesium, minManganese: minManganese, maxManganese: maxManganese, minPhosphorus: minPhosphorus, maxPhosphorus: maxPhosphorus, minPotassium: minPotassium, maxPotassium: maxPotassium, minSelenium: minSelenium, maxSelenium: maxSelenium, minSodium: minSodium, maxSodium: maxSodium, minSugar: minSugar, maxSugar: maxSugar, minZinc: minZinc, maxZinc: maxZinc, offset: offset, number: number, limitLicense: limitLicense)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["query"] = options.query
                if let cuisine = options.cuisine {
                  params["cuisine"] = cuisine
                }
                if let excludeCuisine = options.excludeCuisine {
                  params["excludeCuisine"] = excludeCuisine
                }
                if let diet = options.diet {
                  params["diet"] = diet
                }
                if let intolerances = options.intolerances {
                  params["intolerances"] = intolerances
                }
                if let equipment = options.equipment {
                  params["equipment"] = equipment
                }
                if let includeIngredients = options.includeIngredients {
                  params["includeIngredients"] = includeIngredients
                }
                if let excludeIngredients = options.excludeIngredients {
                  params["excludeIngredients"] = excludeIngredients
                }
                if let type = options.type {
                  params["type"] = type
                }
                if let instructionsRequired = options.instructionsRequired {
                  params["instructionsRequired"] = instructionsRequired
                }
                if let fillIngredients = options.fillIngredients {
                  params["fillIngredients"] = fillIngredients
                }
                if let addRecipeInformation = options.addRecipeInformation {
                  params["addRecipeInformation"] = addRecipeInformation
                }
                if let addRecipeNutrition = options.addRecipeNutrition {
                  params["addRecipeNutrition"] = addRecipeNutrition
                }
                if let author = options.author {
                  params["author"] = author
                }
                if let tags = options.tags {
                  params["tags"] = tags
                }
                if let recipeBoxId = options.recipeBoxId {
                  params["recipeBoxId"] = recipeBoxId
                }
                if let titleMatch = options.titleMatch {
                  params["titleMatch"] = titleMatch
                }
                if let maxReadyTime = options.maxReadyTime {
                  params["maxReadyTime"] = maxReadyTime
                }
                if let ignorePantry = options.ignorePantry {
                  params["ignorePantry"] = ignorePantry
                }
                if let sort = options.sort {
                  params["sort"] = sort
                }
                if let sortDirection = options.sortDirection {
                  params["sortDirection"] = sortDirection
                }
                if let minCarbs = options.minCarbs {
                  params["minCarbs"] = minCarbs
                }
                if let maxCarbs = options.maxCarbs {
                  params["maxCarbs"] = maxCarbs
                }
                if let minProtein = options.minProtein {
                  params["minProtein"] = minProtein
                }
                if let maxProtein = options.maxProtein {
                  params["maxProtein"] = maxProtein
                }
                if let minCalories = options.minCalories {
                  params["minCalories"] = minCalories
                }
                if let maxCalories = options.maxCalories {
                  params["maxCalories"] = maxCalories
                }
                if let minFat = options.minFat {
                  params["minFat"] = minFat
                }
                if let maxFat = options.maxFat {
                  params["maxFat"] = maxFat
                }
                if let minAlcohol = options.minAlcohol {
                  params["minAlcohol"] = minAlcohol
                }
                if let maxAlcohol = options.maxAlcohol {
                  params["maxAlcohol"] = maxAlcohol
                }
                if let minCaffeine = options.minCaffeine {
                  params["minCaffeine"] = minCaffeine
                }
                if let maxCaffeine = options.maxCaffeine {
                  params["maxCaffeine"] = maxCaffeine
                }
                if let minCopper = options.minCopper {
                  params["minCopper"] = minCopper
                }
                if let maxCopper = options.maxCopper {
                  params["maxCopper"] = maxCopper
                }
                if let minCalcium = options.minCalcium {
                  params["minCalcium"] = minCalcium
                }
                if let maxCalcium = options.maxCalcium {
                  params["maxCalcium"] = maxCalcium
                }
                if let minCholine = options.minCholine {
                  params["minCholine"] = minCholine
                }
                if let maxCholine = options.maxCholine {
                  params["maxCholine"] = maxCholine
                }
                if let minCholesterol = options.minCholesterol {
                  params["minCholesterol"] = minCholesterol
                }
                if let maxCholesterol = options.maxCholesterol {
                  params["maxCholesterol"] = maxCholesterol
                }
                if let minFluoride = options.minFluoride {
                  params["minFluoride"] = minFluoride
                }
                if let maxFluoride = options.maxFluoride {
                  params["maxFluoride"] = maxFluoride
                }
                if let minSaturatedFat = options.minSaturatedFat {
                  params["minSaturatedFat"] = minSaturatedFat
                }
                if let maxSaturatedFat = options.maxSaturatedFat {
                  params["maxSaturatedFat"] = maxSaturatedFat
                }
                if let minVitaminA = options.minVitaminA {
                  params["minVitaminA"] = minVitaminA
                }
                if let maxVitaminA = options.maxVitaminA {
                  params["maxVitaminA"] = maxVitaminA
                }
                if let minVitaminC = options.minVitaminC {
                  params["minVitaminC"] = minVitaminC
                }
                if let maxVitaminC = options.maxVitaminC {
                  params["maxVitaminC"] = maxVitaminC
                }
                if let minVitaminD = options.minVitaminD {
                  params["minVitaminD"] = minVitaminD
                }
                if let maxVitaminD = options.maxVitaminD {
                  params["maxVitaminD"] = maxVitaminD
                }
                if let minVitaminE = options.minVitaminE {
                  params["minVitaminE"] = minVitaminE
                }
                if let maxVitaminE = options.maxVitaminE {
                  params["maxVitaminE"] = maxVitaminE
                }
                if let minVitaminK = options.minVitaminK {
                  params["minVitaminK"] = minVitaminK
                }
                if let maxVitaminK = options.maxVitaminK {
                  params["maxVitaminK"] = maxVitaminK
                }
                if let minVitaminB1 = options.minVitaminB1 {
                  params["minVitaminB1"] = minVitaminB1
                }
                if let maxVitaminB1 = options.maxVitaminB1 {
                  params["maxVitaminB1"] = maxVitaminB1
                }
                if let minVitaminB2 = options.minVitaminB2 {
                  params["minVitaminB2"] = minVitaminB2
                }
                if let maxVitaminB2 = options.maxVitaminB2 {
                  params["maxVitaminB2"] = maxVitaminB2
                }
                if let minVitaminB5 = options.minVitaminB5 {
                  params["minVitaminB5"] = minVitaminB5
                }
                if let maxVitaminB5 = options.maxVitaminB5 {
                  params["maxVitaminB5"] = maxVitaminB5
                }
                if let minVitaminB3 = options.minVitaminB3 {
                  params["minVitaminB3"] = minVitaminB3
                }
                if let maxVitaminB3 = options.maxVitaminB3 {
                  params["maxVitaminB3"] = maxVitaminB3
                }
                if let minVitaminB6 = options.minVitaminB6 {
                  params["minVitaminB6"] = minVitaminB6
                }
                if let maxVitaminB6 = options.maxVitaminB6 {
                  params["maxVitaminB6"] = maxVitaminB6
                }
                if let minVitaminB12 = options.minVitaminB12 {
                  params["minVitaminB12"] = minVitaminB12
                }
                if let maxVitaminB12 = options.maxVitaminB12 {
                  params["maxVitaminB12"] = maxVitaminB12
                }
                if let minFiber = options.minFiber {
                  params["minFiber"] = minFiber
                }
                if let maxFiber = options.maxFiber {
                  params["maxFiber"] = maxFiber
                }
                if let minFolate = options.minFolate {
                  params["minFolate"] = minFolate
                }
                if let maxFolate = options.maxFolate {
                  params["maxFolate"] = maxFolate
                }
                if let minFolicAcid = options.minFolicAcid {
                  params["minFolicAcid"] = minFolicAcid
                }
                if let maxFolicAcid = options.maxFolicAcid {
                  params["maxFolicAcid"] = maxFolicAcid
                }
                if let minIodine = options.minIodine {
                  params["minIodine"] = minIodine
                }
                if let maxIodine = options.maxIodine {
                  params["maxIodine"] = maxIodine
                }
                if let minIron = options.minIron {
                  params["minIron"] = minIron
                }
                if let maxIron = options.maxIron {
                  params["maxIron"] = maxIron
                }
                if let minMagnesium = options.minMagnesium {
                  params["minMagnesium"] = minMagnesium
                }
                if let maxMagnesium = options.maxMagnesium {
                  params["maxMagnesium"] = maxMagnesium
                }
                if let minManganese = options.minManganese {
                  params["minManganese"] = minManganese
                }
                if let maxManganese = options.maxManganese {
                  params["maxManganese"] = maxManganese
                }
                if let minPhosphorus = options.minPhosphorus {
                  params["minPhosphorus"] = minPhosphorus
                }
                if let maxPhosphorus = options.maxPhosphorus {
                  params["maxPhosphorus"] = maxPhosphorus
                }
                if let minPotassium = options.minPotassium {
                  params["minPotassium"] = minPotassium
                }
                if let maxPotassium = options.maxPotassium {
                  params["maxPotassium"] = maxPotassium
                }
                if let minSelenium = options.minSelenium {
                  params["minSelenium"] = minSelenium
                }
                if let maxSelenium = options.maxSelenium {
                  params["maxSelenium"] = maxSelenium
                }
                if let minSodium = options.minSodium {
                  params["minSodium"] = minSodium
                }
                if let maxSodium = options.maxSodium {
                  params["maxSodium"] = maxSodium
                }
                if let minSugar = options.minSugar {
                  params["minSugar"] = minSugar
                }
                if let maxSugar = options.maxSugar {
                  params["maxSugar"] = maxSugar
                }
                if let minZinc = options.minZinc {
                  params["minZinc"] = minZinc
                }
                if let maxZinc = options.maxZinc {
                  params["maxZinc"] = maxZinc
                }
                if let offset = options.offset {
                  params["offset"] = offset
                }
                if let number = options.number {
                  params["number"] = number
                }
                if let limitLicense = options.limitLicense {
                  params["limitLicense"] = limitLicense
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [String: Any]

            /** Success */
            case status200([String: Any])

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            /** Not Found */
            case status404

            public var success: [String: Any]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decodeAny([String: Any].self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                case 404: self = .status404
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
